

public class Operations
    {
        private Customization cInstance = new Customization();
        GeneralInfo nInstance = new GeneralInfo();

        public Operations(GeneralInfo instance)
        {
            nInstance = instance;
        }

        public string CmdParser(int typeOp, string cmdArg, string opArg)
        {
            if (typeOp == 1)
            {
                Console.WriteLine($"{cInstance.INFO} Inline cmd being executed ...");
                return DownloadFile(opArg);
            }
            else if (typeOp == 2)
            {
                Console.WriteLine($"{cInstance.INFO} Argument from cmd being executed ...");
                if (cmdArg.Contains("cd"))
                {
                    return SetWorkingDirectory(opArg);
                }
                else if (cmdArg.Contains("ls"))
                {
                    return EnumWorkingDirectory(opArg);
                }
                else if (cmdArg.Contains("download"))
                {
                    return DownloadFile(opArg);
                }
                else if (cmdArg.Contains("getInfos"))
                {
                    // nInstance.printInfos();
                    return "infos";
                }
                else
                {
                    // need to check this to add more args
                    string setResults = ExecuteCmd(cmdArg);
                    return setResults.ToString();
                }
            }

            return "nothing";
        }

        public string DownloadFile(string url)
        {
            try
            {
                Console.WriteLine($"{cInstance.INFO} Ready to download file ...");
                string fileName = url.Split("/")[url.Split("/").Length - 1];
                string filePath = nInstance.tmpPath + fileName;
                using WebClient wClient = new WebClient();
                wClient.DownloadFile(url, filePath);
                Console.WriteLine(
                    $"{cInstance.SUCCESS} File {cInstance.BOLD}{{0}}{cInstance.NOBOLD} downloaded to path : {cInstance.BOLD}{{1}}{cInstance.NOBOLD} ...",
                    fileName, filePath);
                Console.WriteLine($"{cInstance.INFO} Opening file ...");
                Process.Start("explorer.exe", filePath);
                return "Executed successfully";
            }
            catch (Exception e)
            {
                return e.Message.ToString();
            }
        }

        public string SetWorkingDirectory(string path)
        {
            try
            {
                System.IO.Directory.SetCurrentDirectory(path);
                return "Directory changed";
            }
            catch (Exception e)
            {
                return e.Message.ToString();
            }
        }

        public string EnumWorkingDirectory(string path)
        {
            try
            {
                if (path == "")
                {
                    path = nInstance.cDirectory;
                }
                
                System.Text.StringBuilder sbInstance = new System.Text.StringBuilder();
                var dirs = from line in System.IO.Directory.EnumerateDirectories(path) select line;

                foreach (var dir in dirs)
                {
                    sbInstance.Append(dir);
                    sbInstance.Append(Environment.NewLine);
                }

                var files = from line in System.IO.Directory.EnumerateFiles(path) select line;

                foreach (var file in files)
                {
                    sbInstance.Append(file);
                    sbInstance.Append(Environment.NewLine);
                }

                string enums = sbInstance.ToString();

                return enums;
            }
            catch (Exception e)
            {
                return e.Message.ToString();
            }
        }

        public string ExecuteCmd(string cmd)
        {
            try
            {
                string results = "";
                System.Diagnostics.Process pInstance = new Process();
                pInstance.StartInfo.FileName = "cmd.exe";
                pInstance.StartInfo.Arguments = " /c " + cmd;
                pInstance.StartInfo.UseShellExecute = false;
                pInstance.StartInfo.CreateNoWindow = false;
                pInstance.StartInfo.WorkingDirectory = nInstance.cDirectory;
                pInstance.StartInfo.RedirectStandardOutput = true;
                pInstance.StartInfo.RedirectStandardError = true;
                pInstance.Start();

                results += pInstance.StandardOutput.ReadToEnd();
                results += pInstance.StandardError.ReadToEnd();
                return results;
            }
            catch (Exception e)
            {
                return e.Message.ToString();
            }
        }

        public void CommandParserTwo(string cmd)
        {
            string command = "";
            string argument = "";

            if (cmd.Contains(" "))
            {
                command = cmd.Split(" ")[0];
                argument = cmd.Split(" ")[1];
            }
            else
            {
                command = cmd;
            }
            
        }
    }